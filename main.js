(()=>{"use strict";const e=async e=>{const{method:t,path:s,data:n,headers:a={"Content-Type":"application/json"}}=e,r=`https://chat-be-jgtb.onrender.com${s}`;return(await fetch(r,{method:t,headers:a,body:JSON.stringify(n)})).json()};class t{constructor(e){this.entityPath=e}list(){return e({method:"GET",path:`/${this.entityPath}`})}get(t){return e({method:"GET",path:`/${this.entityPath}/${t}`})}create(t){return e({method:"POST",path:`/${this.entityPath}`,data:t})}update(t,s){return e({method:"PUT",path:`/${this.entityPath}/${t}`,data:s})}delete(t){return e({method:"DELETE",path:`/${this.entityPath}/${t}`})}}class s extends t{createNewUser(e){return this.create({name:e})}}const n=document.getElementById("root");new class{constructor(e){this.container=e,this.websocket=null,this.user=null}init(){this.onEnterChatHandler(),this.registerEvents()}start(){const e=new s("new-user"),t=this.container.querySelector(".modal"),n=this.container.querySelector(".chat-container");this.container.querySelector(".modal-button").addEventListener("click",(async()=>{const s=this.container.querySelector(".nickname-input").value;if(s)try{const a=await e.createNewUser(s);"ok"===a.status?(t.classList.add("unactive"),n.classList.remove("unactive"),this.user=s,this.init()):alert(a.message)}catch(e){alert(e)}else alert("Please enter a nickname")}))}registerEvents(){window.addEventListener("beforeunload",(()=>this.exitChat())),this.messageForm=this.container.querySelector(".message-form"),this.messageForm.addEventListener("submit",(e=>{e.preventDefault(),this.sendMessage()}))}onEnterChatHandler(){this.websocket=new WebSocket("ws://chat-be-jgtb.onrender.com/ws"),this.subscribeOnEvents()}subscribeOnEvents(){this.websocket.addEventListener("message",(e=>{const t=JSON.parse(e.data);t.type||this.updateUserList(t),"send"===t.type&&this.renderMessage(t)}))}sendMessage(){const e=this.container.querySelector(".message-field").value;if(!e)return;let t={type:"send",message:{text:e,time:new Date},user:this.user};this.websocket.send(JSON.stringify(t)),this.container.querySelector(".message-field").value=""}renderMessage(e){let{user:t,message:s}=e;const n=t,{text:a,time:r}=s;let i;const c=document.createElement("div");c.classList.add("message"),n===this.user?(i="You",c.classList.add("you")):i=n,c.innerHTML=`\n    <div class="message-header">\n      <span class="message-owner">${i}</span>\n      <span class="message-date">${new Date(r).toLocaleString("ru-RU")}</span>\n    </div>\n    <span class="message-content">${a}</span>\n    `,this.chatScreen=this.container.querySelector(".chat-screen"),this.chatScreen.append(c)}updateUserList(e){this.container.querySelector(".chat-users").innerHTML=e.map((e=>{let t;return t=e.name===this.user?"You":e.name,`\n        <div class="user">\n          <div class="user-photo">\n          </div>\n          <span class="user-name">${t}</span>\n        </div>\n    `})).join("")}exitChat(){const e={type:"exit",user:this.user};this.websocket.send(JSON.stringify(e))}}(n).start()})();